@page "/zap/change/{ZapId:guid}"
@attribute [StreamRendering]

@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navigationManager
@using MedicalExaminationPreliminaryLists.Share.DTOs
<PageTitle>Изменить запись</PageTitle>

<div>
    <p>
        Порядковый номер:<br />
        <input @bind-value="zap.ZAPNumber" />
    </p>
    <p>
        Год:<br />
        <input @bind-value="zap.Year" />
    </p>
    <p>
        Фамилия:<br />
        <input @bind-value="zap.Surname" />
    </p>
    <p>
        Имя:<br />
        <input @bind-value="zap.Name1" />
    </p>
    <p>
        Отчество:<br />
        <input @bind-value="zap.Name2" />
    </p>
    <p>
        Дата рождения:<br />
        <input @bind-value="zap.Birthday" />
    </p>
    <p>
        Телефонный номер:<br />
        <input @bind-value="zap.TelephoneNumber" />
    </p>
    <p>
        <button type="button" class="btn btn-primary" @onclick="Submit">Сохранить</button>
    </p>
</div>

@code {
    [Parameter]
    public Guid ZapId { get; set; }

    ZAPModel zap = new();
    HttpClient httpClient = null!;

    protected override async Task OnInitializedAsync()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7112/api/v1/Zaps");
        await LoadData();
    }

    async Task LoadData()
    {
        zap = await httpClient.GetFromJsonAsync<ZAPModel>($"{httpClient.BaseAddress}/{ZapId}") ?? zap;
    }

    async Task Submit()
    {
        await httpClient.PutAsJsonAsync($"{httpClient.BaseAddress}/{zap.Id}", zap);

        _navigationManager.NavigateTo($"zaps/{zap.UploadFileId}");
        await LoadData();
    }
}

